clientSrv: client-srv
namespace: default
backendSrv: backend-srv

appName:
  client: client
  backend: backend

containers:
  client:
    image: ghislaingenay/xxxxx
    tag: latest
  backend:
    image: ghislaingenay/xxxxxx
    tag: latest

baseDomain: xxx.xxx.com
baseWwwDomain: xx.xxx.xxx.com


namespace: xxxxx

hostSecret: xx-xxxx-com

issuer:
  server: "https://xx.xx.org/directory"
  key: lets-encrypt-default
  email: ghislaingenay@gmail.com

  replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  name: "ingress-service"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "{{ .Values.issuer.key }}"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: "{{ .Values.baseDomain }}"
      http:
        paths:
          - path: /api/?(.*)
            pathType: Prefix
            backend:
              service:
                name: "{{ .Values.backendSrv }}"
                port:
                  number: 3000
          - path: /?(.*)
            pathType: Prefix
            backend:
              service:
                name: "{{ .Values.clientSrv }}"
                port:
                  number: 3000
    - host: "{{ .Values.baseWwwDomain }}"
      http:
        paths:
          - path: /api/?(.*)
            pathType: Prefix
            backend:
              service:
                name: "{{ .Values.backendSrv }}"
                port:
                  number: 3000
          - path: /?(.*)
            pathType: Prefix
            backend:
              service:
                name: "{{ .Values.clientSrv }}"
                port:
                  number: 3000
  tls:
    - hosts:
        - "{{ .Values.baseDomain }}"
        - "{{ .Values.baseWwwDomain }}"
      secretName: "{{ .Values.hostSecret }}"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "{{ .Values.issuer.key }}"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
service:
  port: 8000
# Can add secret names linked to secret.yaml file for example
